	virtual void compute (int count, FAUSTFLOAT** input, FAUSTFLOAT** output) {
		float 	fSlow0 = (0.5f * ((int(float(fcheckbox0)))?2:float(fslider0)));
		float 	fSlow1 = ((int(float(fcheckbox1)))?(0 - fSlow0):fSlow0);
		float 	fSlow2 = float(fslider1);
		float 	fSlow3 = powf(10,(0.05f * float(fslider2)));
		float 	fSlow4 = expf((fConst1 * (0 - (3.141592653589793f * float(fslider3)))));
		float 	fSlow5 = faustpower<2>(fSlow4);
		float 	fSlow6 = (fConst2 * float(fslider4));
		float 	fSlow7 = cosf(fSlow6);
		float 	fSlow8 = sinf(fSlow6);
		float 	fSlow9 = (0 - fSlow8);
		float 	fSlow10 = float(fslider5);
		float 	fSlow11 = (6.283185307179586f * fSlow10);
		float 	fSlow12 = (0.5f * ((6.283185307179586f * max(fSlow10, float(fslider6))) - fSlow11));
		float 	fSlow13 = float(fslider7);
		float 	fSlow14 = (fConst1 * fSlow13);
		float 	fSlow15 = (0 - (2 * fSlow4));
		float 	fSlow16 = (fConst1 * faustpower<2>(fSlow13));
		float 	fSlow17 = (fConst1 * faustpower<3>(fSlow13));
		float 	fSlow18 = (fConst1 * faustpower<4>(fSlow13));
		float 	fSlow19 = (1 - fSlow0);
		FAUSTFLOAT* input0 = input[0];
		FAUSTFLOAT* input1 = input[1];
		FAUSTFLOAT* output0 = output[0];
		FAUSTFLOAT* output1 = output[1];
		for (int i=0; i<count; i++) {
			float fTemp0 = (float)input0[i];
			float fTemp1 = (float)input1[i];
			iVec0[0] = 1;
			fRec5[0] = ((fSlow8 * fRec6[1]) + (fSlow7 * fRec5[1]));
			fRec6[0] = ((1 + ((fSlow7 * fRec6[1]) + (fSlow9 * fRec5[1]))) - iVec0[1]);
			float fTemp2 = (fSlow11 + (fSlow12 * (1 - fRec5[0])));
			float fTemp3 = (fRec4[1] * cosf((fSlow14 * fTemp2)));
			fRec4[0] = (0 - (((fSlow15 * fTemp3) + (fSlow5 * fRec4[2])) - ((fSlow3 * fTemp0) + (fSlow2 * fRec0[1]))));
			float fTemp4 = (fRec3[1] * cosf((fSlow16 * fTemp2)));
			fRec3[0] = ((fSlow15 * (fTemp3 - fTemp4)) + (fRec4[2] + (fSlow5 * (fRec4[0] - fRec3[2]))));
			float fTemp5 = (fRec2[1] * cosf((fSlow17 * fTemp2)));
			fRec2[0] = ((fSlow15 * (fTemp4 - fTemp5)) + (fRec3[2] + (fSlow5 * (fRec3[0] - fRec2[2]))));
			float fTemp6 = (fRec1[1] * cosf((fSlow18 * fTemp2)));
			fRec1[0] = ((fSlow15 * (fTemp5 - fTemp6)) + (fRec2[2] + (fSlow5 * (fRec2[0] - fRec1[2]))));
			fRec0[0] = ((fSlow5 * fRec1[0]) + ((fSlow15 * fTemp6) + fRec1[2]));
			output0[i] = (FAUSTFLOAT)((fSlow3 * (fTemp0 * fSlow19)) + (fRec0[0] * fSlow1));
			float fTemp7 = (fSlow11 + (fSlow12 * (1 - fRec6[0])));
			float fTemp8 = (fRec11[1] * cosf((fSlow14 * fTemp7)));
			fRec11[0] = (0 - (((fSlow15 * fTemp8) + (fSlow5 * fRec11[2])) - ((fSlow3 * fTemp1) + (fSlow2 * fRec7[1]))));
			float fTemp9 = (fRec10[1] * cosf((fSlow16 * fTemp7)));
			fRec10[0] = ((fSlow15 * (fTemp8 - fTemp9)) + (fRec11[2] + (fSlow5 * (fRec11[0] - fRec10[2]))));
			float fTemp10 = (fRec9[1] * cosf((fSlow17 * fTemp7)));
			fRec9[0] = ((fSlow15 * (fTemp9 - fTemp10)) + (fRec10[2] + (fSlow5 * (fRec10[0] - fRec9[2]))));
			float fTemp11 = (fRec8[1] * cosf((fSlow18 * fTemp7)));
			fRec8[0] = ((fSlow15 * (fTemp10 - fTemp11)) + (fRec9[2] + (fSlow5 * (fRec9[0] - fRec8[2]))));
			fRec7[0] = ((fSlow5 * fRec8[0]) + ((fSlow15 * fTemp11) + fRec8[2]));
			output1[i] = (FAUSTFLOAT)((fSlow3 * (fTemp1 * fSlow19)) + (fRec7[0] * fSlow1));
			// post processing
			fRec7[1] = fRec7[0];
			fRec8[2] = fRec8[1]; fRec8[1] = fRec8[0];
			fRec9[2] = fRec9[1]; fRec9[1] = fRec9[0];
			fRec10[2] = fRec10[1]; fRec10[1] = fRec10[0];
			fRec11[2] = fRec11[1]; fRec11[1] = fRec11[0];
			fRec0[1] = fRec0[0];
			fRec1[2] = fRec1[1]; fRec1[1] = fRec1[0];
			fRec2[2] = fRec2[1]; fRec2[1] = fRec2[0];
			fRec3[2] = fRec3[1]; fRec3[1] = fRec3[0];
			fRec4[2] = fRec4[1]; fRec4[1] = fRec4[0];
			fRec6[1] = fRec6[0];
			fRec5[1] = fRec5[0];
			iVec0[1] = iVec0[0];
		}
	}