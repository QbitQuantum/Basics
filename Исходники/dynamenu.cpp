//***********************************************************************
// Function: CDynaMenuApp::InitInstance()
//
// Purpose:
//      InitInstance is called by the framework to perform per-instance
//      initialization of the application.
//
//      This function is the code generated by AppWizard with one
//      exception - we use our own class for the frame window attached
//      to a document template, instead of using CMDIChildWnd.
//
// Parameters:
//      none
//
// Returns:
//      nonzero if successful, otherwise 0
//
// Comments:
//      see the CWinApp::InitInstance() documentation for further info.
//
//***********************************************************************
BOOL CDynaMenuApp::InitInstance()
{
	// Standard initialization
	// If you are not using these features and wish to reduce the size
	//  of your final executable, you should remove from the following
	//  the specific initialization routines you do not need.

	LoadStdProfileSettings();  // Load standard INI file options (including MRU)

	// Register the application's document templates.  Document templates
	//  serve as the connection between documents, frame windows and views.

	CMultiDocTemplate* pDocTemplate;
	pDocTemplate = new CMultiDocTemplate(
		IDR_DYMENUTYPE,
		RUNTIME_CLASS(CDynaMenuDoc),
		RUNTIME_CLASS(CDynaMDIChildWnd),        // our private MDI child class!!
		RUNTIME_CLASS(CDynaMenuView));
	AddDocTemplate(pDocTemplate);

	// create main MDI Frame window
	CMainFrame* pMainFrame = new CMainFrame;
	if (!pMainFrame->LoadFrame(IDR_MAINFRAME)){
		delete pMainFrame;
		return FALSE;
	}
	m_pMainWnd = pMainFrame;

	// enable file manager drag/drop and DDE Execute open
	EnableShellOpen();
	RegisterShellFileTypes(TRUE);

	// Parse command line for standard shell commands, DDE, file open
	CCommandLineInfo cmdInfo;
	ParseCommandLine(cmdInfo);

	// Dispatch commands specified on the command line
	if (!ProcessShellCommand(cmdInfo))
		return FALSE;

	m_pMainWnd->DragAcceptFiles();
	// The main window has been initialized, so show and update it.
	pMainFrame->ShowWindow(m_nCmdShow);
	pMainFrame->UpdateWindow();

	return TRUE;
}