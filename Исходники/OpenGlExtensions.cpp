bool eae6320::OpenGlExtensions::Load( std::string* o_errorMessage )
{
	// A current OpenGL context must exist before extensions can be loaded
	{
		const HGLRC currentContext = wglGetCurrentContext();
		if ( currentContext == NULL )
		{
			if ( o_errorMessage )
			{
				*o_errorMessage = "OpenGL extensions can't be loaded without a current OpenGL context";
			}
			return false;
		}
	}

#define EAE6320_LOADGLFUNCTION( i_functionName, i_functionType )														\
		i_functionName = reinterpret_cast<i_functionType>( GetGlFunctionAddress( #i_functionName, o_errorMessage ) );	\
		if ( !i_functionName )																							\
			return false;

	EAE6320_LOADGLFUNCTION( glActiveTexture, PFNGLACTIVETEXTUREPROC );
	EAE6320_LOADGLFUNCTION( glAttachShader, PFNGLATTACHSHADERPROC );
	EAE6320_LOADGLFUNCTION( glBindBuffer, PFNGLBINDBUFFERPROC );
	EAE6320_LOADGLFUNCTION( glBindVertexArray, PFNGLBINDVERTEXARRAYPROC );
	EAE6320_LOADGLFUNCTION( glBufferData, PFNGLBUFFERDATAPROC );
	EAE6320_LOADGLFUNCTION( glCompileShader, PFNGLCOMPILESHADERPROC );
	EAE6320_LOADGLFUNCTION( glCreateProgram, PFNGLCREATEPROGRAMPROC );
	EAE6320_LOADGLFUNCTION( glCreateShader, PFNGLCREATESHADERPROC );
	EAE6320_LOADGLFUNCTION( glDeleteBuffers, PFNGLDELETEBUFFERSPROC );
	EAE6320_LOADGLFUNCTION( glDeleteProgram, PFNGLDELETEPROGRAMPROC );
	EAE6320_LOADGLFUNCTION( glDeleteVertexArrays, PFNGLDELETEVERTEXARRAYSPROC );
	EAE6320_LOADGLFUNCTION( glDeleteShader, PFNGLDELETESHADERPROC );
	EAE6320_LOADGLFUNCTION( glEnableVertexAttribArray, PFNGLENABLEVERTEXATTRIBARRAYARBPROC );
	EAE6320_LOADGLFUNCTION( glGenBuffers, PFNGLGENBUFFERSPROC );
	EAE6320_LOADGLFUNCTION( glGenVertexArrays, PFNGLGENVERTEXARRAYSPROC );
	EAE6320_LOADGLFUNCTION( glGetProgramInfoLog, PFNGLGETPROGRAMINFOLOGPROC );
	EAE6320_LOADGLFUNCTION( glGetProgramiv, PFNGLGETPROGRAMIVPROC );
	EAE6320_LOADGLFUNCTION( glGetShaderInfoLog, PFNGLGETSHADERINFOLOGPROC );
	EAE6320_LOADGLFUNCTION( glGetShaderiv, PFNGLGETSHADERIVPROC );
	EAE6320_LOADGLFUNCTION( glGetUniformLocation, PFNGLGETUNIFORMLOCATIONPROC );
	EAE6320_LOADGLFUNCTION( glLinkProgram, PFNGLLINKPROGRAMPROC );
	EAE6320_LOADGLFUNCTION( glShaderSource, PFNGLSHADERSOURCEPROC );
	EAE6320_LOADGLFUNCTION( glUniform1fv, PFNGLUNIFORM1FVPROC );
	EAE6320_LOADGLFUNCTION( glUniform2fv, PFNGLUNIFORM2FVPROC );
	EAE6320_LOADGLFUNCTION( glUniform3fv, PFNGLUNIFORM3FVPROC );
	EAE6320_LOADGLFUNCTION( glUniform4fv, PFNGLUNIFORM4FVPROC );
	EAE6320_LOADGLFUNCTION( glUniformMatrix4fv, PFNGLUNIFORMMATRIX4FVPROC );
	EAE6320_LOADGLFUNCTION( glUseProgram, PFNGLUSEPROGRAMPROC );
	EAE6320_LOADGLFUNCTION( glVertexAttribPointer, PFNGLVERTEXATTRIBPOINTERPROC );
	EAE6320_LOADGLFUNCTION( glCompressedTexImage2D, PFNGLCOMPRESSEDTEXIMAGE2DPROC);
	EAE6320_LOADGLFUNCTION( glUniform1i, PFNGLUNIFORM1IPROC);

#undef EAE6320_LOADGLFUNCTION

	return true;
}