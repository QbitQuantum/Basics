/**
 * Writes the checksums in a file.
 *
 * After the writing of the file, the state of the file should be unmodified
 * and the file name must be modified to <CODE>fileName</CODE>.
 * The paths of the files in the ChecksumData must be relative to the path of 
 * <CODE>fileName</CODE>.
 *
 * As wxChecksums always reads files in binary mode, all the file are marked
 * as binary files.
 *
 * @param  fileName  The file name in which the checksums are written.
 * @return <CODE>true</CODE> if the checksums have been written successfully,
 *         <CODE>false</CODE> otherwise.
 */
bool MD5File::write(const wxFileName& fileName)
{
  wxLogNull      logNo;   // No log
  wxString       line;    // line of text
  wxDateTime     d;       // A date
  wxFileName     nameRel; // File name with a relative path
  wxFileName     nameAbs; // File name with ab absolute path
  wxCOff_t       length;  // Length of the file
  wxPathFormat   format;  // Format of the path separators in the file
  
  wxFileOutputStream output(fileName.GetFullPath());
  if (!output.Ok())
    return false;
  wxTextOutputStream text(output, static_cast<wxEOL>(AppPrefs::get()->readLong(prMD5_WRITE_EOL)));

  // Gets the path separator
  format = static_cast<wxPathFormat>(AppPrefs::get()->readLong(prMD5_WRITE_PATH_SEPARATOR));

  // Write header
  if (AppPrefs::get()->readBool(prMD5_WRITE_GEN_AND_DATE))
  {
    d = wxDateTime::Now();
    line.Printf(wxT("; Generated by %s on %s at %s\n"), ::getAppName().c_str(),
                d.Format(wxT("%Y-%m-%d")).c_str(), d.Format(wxT("%H:%M:%S")).c_str());
    text.WriteString(line);
    text.WriteString(wxT(";\n"));
  }
  
  // Write the size and the date of the files
  if (AppPrefs::get()->readBool(prMD5_WRITE_FILE_SIZE_AND_DATE))
  {
    MChecksumData::const_iterator it = getChecksumDataBegin();
    MChecksumData::const_iterator end = getChecksumDataEnd();
    
    while (it != end)
    {
      const ChecksumData& cd = it->second;
      nameAbs = cd.getFileName();
      if (!nameAbs.IsAbsolute())
        nameAbs.MakeAbsolute(wxFileName(this->getFileName()).GetPath(wxPATH_GET_VOLUME | wxPATH_GET_SEPARATOR));
      nameRel = nameAbs;
      if (!nameRel.IsRelative())
        nameRel.MakeRelativeTo(fileName.GetPath(wxPATH_GET_VOLUME | wxPATH_GET_SEPARATOR));

      if ((length = wxCGetFileLength(nameAbs.GetFullPath())) != static_cast<wxCOff_t>(wxInvalidOffset))
      {
        #if defined(wxC_USE_LARGE_FILES)
        text.WriteString(wxString::Format(wxT("; %12" wxLongLongFmtSpec "u  "), length));
        #else
        text.WriteString(wxString::Format(wxT("; %12u  "), length));
        #endif
        d = nameAbs.GetModificationTime();
        text << d.Format(wxT("%H:%M.%S")) << wxT(" ") << d.Format(wxT("%Y-%m-%d"));
        text << wxT(" ") << nameRel.GetFullPath(format) << wxT("\n");
      }
      it++;
    }
  }
  
  // Write checksums
  MChecksumData::const_iterator it = getChecksumDataBegin();
  MChecksumData::const_iterator end = getChecksumDataEnd();
    
  while (it != end)
  {
    const ChecksumData& cd = it->second;
    nameAbs = cd.getFileName();
    if (!nameAbs.IsAbsolute())
      nameAbs.MakeAbsolute(wxFileName(this->getFileName()).GetPath(wxPATH_GET_VOLUME | wxPATH_GET_SEPARATOR));
    nameRel = nameAbs;
    if (!nameRel.IsRelative())
      nameRel.MakeRelativeTo(fileName.GetPath(wxPATH_GET_VOLUME | wxPATH_GET_SEPARATOR));

    text << cd.getChecksum().Lower() << wxT(" *")
         << nameRel.GetFullPath(format) << wxT("\n");
    it++;
  }
  
  if (output.IsOk())
  {
    // Modify file paths if the path of the checksum file has been modified.
    {
      MChecksumData::iterator it = getChecksumDataBeginI();
      MChecksumData::iterator end = getChecksumDataEndI();

      while (it != end)
      {
        ChecksumData& cd = it->second;
        nameAbs = cd.getFileName();
        if (!nameAbs.IsAbsolute())
          nameAbs.MakeAbsolute(wxFileName(this->getFileName()).GetPath(wxPATH_GET_VOLUME | wxPATH_GET_SEPARATOR));
        nameRel = nameAbs;
        if (!nameRel.IsRelative())
          nameRel.MakeRelativeTo(fileName.GetPath(wxPATH_GET_VOLUME | wxPATH_GET_SEPARATOR));

        cd.setFileName(nameRel);
        it++;
      }
    }
    
    this->setFileName(fileName.GetFullPath());
    this->setModified(false);
    return true;
  }
  else
    return false;
}